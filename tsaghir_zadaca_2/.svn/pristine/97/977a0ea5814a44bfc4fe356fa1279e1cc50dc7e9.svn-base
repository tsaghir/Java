/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.foi.nwtis.tsaghir.web.pomagaci;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Generalko
 */
public class DataBaseHelper {

    private static DataBaseHelper instance = null;
    private static Connection connection;

    private DataBaseHelper() {
    }

    public static DataBaseHelper getInstance() {
        if (instance == null) {
            instance = new DataBaseHelper();
        }
        return instance;
    }

    public static boolean dodajUredaj(int id, String naziv, float latitude, float longitude) {
        if (!postojiIot(id)) {
            Statement stmt = null;
            String query = String.format("INSERT INTO uredaji (id,naziv,latitude,longitude) VALUES (%d,'%s',%f,%f);", id, naziv, latitude, longitude);
            try {
                stmt = connect().createStatement();
                stmt.executeUpdate(query);
                return true;
            } catch (SQLException ex) {
                Logger.getLogger(DataBaseHelper.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            } finally {
                disconnect();
            }
        }
        return false;
    }

    private static boolean postojiIot(int id) {
        Statement stmt = null;
        String query = "select*from uredaji where id=" + id;
        try {
            stmt = connect().createStatement();
            ResultSet rs = stmt.executeQuery(query);
            return rs.next();
        } catch (SQLException ex) {
            Logger.getLogger(DataBaseHelper.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        } finally {
            disconnect();
        }
    }
    
    public static boolean dodajTemperature(int id, float temp, String vrijeme_mjerenja,String vrijeme_kreiranja){
        if(postojiIot(id)){
            Statement stmt = null;
            String query = String.format("INSERT INTO temperature (id,temp,vrijeme_mjerenja,vrijeme_kreiranja) VALUES (%d,%f,%s,%s);", id, temp, vrijeme_mjerenja, vrijeme_kreiranja);
            try {
                stmt = connect().createStatement();
                stmt.executeUpdate(query);
                return true;
            } catch (SQLException ex) {
                Logger.getLogger(DataBaseHelper.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            } finally {
                disconnect();
            }
        }
        return false;
    }
    
    public static boolean dodajDogadaje(int id, int vrsta, String vrijeme_izvrsavanja, String vrijeme_kreiranja){
        if(postojiIot(id)){
            Statement stmt = null;
            String query = String.format("INSERT INTO dogadaji (id,vrsta,vrijeme_izvrsavanja,vrijeme_kreiranja) VALUES (%d,%d,%s,%s);", id, vrsta, vrijeme_izvrsavanja, vrijeme_kreiranja);
            try {
                stmt = connect().createStatement();
                stmt.executeUpdate(query);
                return true;
            } catch (SQLException ex) {
                Logger.getLogger(DataBaseHelper.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            } finally {
                disconnect();
            }
        }
        return false;
    }

    private static Connection connect() {
        if (connection == null) {
            try {
                connection = DriverManager.getConnection(KonfiguracijaHelper.SERVER_DATABASE + KonfiguracijaHelper.USER_DATABASE,
                        KonfiguracijaHelper.USER_USERNAME, KonfiguracijaHelper.USER_PASSWORD);
            } catch (SQLException ex) {
                Logger.getLogger(DataBaseHelper.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return connection;
    }

    // disconnect database
    private static void disconnect() {
        if (connection != null) {
            try {
                connection.close();
                connection = null;
            } catch (SQLException ex) {
                Logger.getLogger(DataBaseHelper.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
