/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.foi.nwtis.tsaghir.web.zrna;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.inject.Named;
import javax.enterprise.context.RequestScoped;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Store;
import org.foi.nwtis.tsaghir.konfiguracije.Konfiguracija;
import org.foi.nwtis.tsaghir.web.kontrole.Izbornik;
import org.foi.nwtis.tsaghir.web.kontrole.Poruka;
import org.foi.nwtis.tsaghir.web.slusaci.SlusacAplikacije;

/**
 *
 * @author grupa_2
 */
@Named(value = "pregledPoruka")
@RequestScoped
public class PregledPoruka {

    private Session session;
    private Store store;
    private Folder folder;
    private Message[] messages;
    private String posluzitelj;
    private String korisnik;
    private String lozinka;

    private ArrayList<Izbornik> mape = new ArrayList<>();
    private String odabranaMapa = "INBOX";
    private ArrayList<Poruka> poruke = new ArrayList<Poruka>();
    private int ukupnoPorukaMapa = 0;
    int brojPrikazanihPoruka = 0;
    int pozicijaOdPoruke = 0;
    int pozicijaDoPoruke = 0;
    private String traziPoruke;

    /**
     * Creates a new instance of PregledPoruka
     */
    public PregledPoruka() {
        dohvatiPodatkeZaMailServer();
        spojiSeNaMailServer();
        preuzmiMape();
        preuzmiPoruke();

    }

    private void dohvatiPodatkeZaMailServer() {
        Konfiguracija konf = SlusacAplikacije.getKonfig();
        this.korisnik = konf.dajPostavku("mail.usernameView");
        this.lozinka = konf.dajPostavku("mail.passwordView");
        this.posluzitelj = konf.dajPostavku("mail.server");
    }

    private void spojiSeNaMailServer() {
        // Start the session
        java.util.Properties properties = System.getProperties();
        session = Session.getInstance(properties, null);

        try {
            // Connect to the store
            store = session.getStore("imap");
            store.connect(this.posluzitelj, this.korisnik, this.lozinka);
        } catch (NoSuchProviderException ex) {
            Logger.getLogger(PregledPoruka.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
            Logger.getLogger(PregledPoruka.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("Host: " + this.posluzitelj + ", user: " + korisnik + ", pw: " + lozinka);
    }

    void preuzmiMape() {
        Folder[] folderi;
        try {
            folder = store.getDefaultFolder();
            folderi = folder.list();
            mape = new ArrayList<Izbornik>();

            for (Folder f : folderi) {
                System.out.println(f.getName());
                mape.add(new Izbornik(f.getName(), f.getName()));
            }
        } catch (MessagingException ex) {
            Logger.getLogger(PregledPoruka.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void preuzmiPoruke() {
        poruke.clear();
        try {
            // Open the INBOX folder
            folder = store.getFolder(this.odabranaMapa);
            folder.open(Folder.READ_ONLY);

            //Ako nema poruka, završi
            if (folder.getMessageCount() == 0) {
                return;
            }
            
            messages = folder.getMessages();
            for (int i = 0; i < messages.length; i++) {
                Message m = messages[i];
                m.getAllHeaders();
                
                poruke.add(new Poruka(Integer.toString(m.getMessageNumber()), m.getSentDate(), m.getReceivedDate(), m.getFrom()[0].toString(),
                        m.getSubject(), dohvatiTekstualniSadrzajPoruke(m.getContent()), m.getContentType()));
            }
        } catch (MessagingException | IOException ex) {
            Logger.getLogger(PregledPoruka.class.getName()).log(Level.SEVERE, null, ex);
        }

        ukupnoPorukaMapa = poruke.size();
    }
    
    private String dohvatiTekstualniSadrzajPoruke(Object sadrzaj){
        if(sadrzaj instanceof String){
            return sadrzaj.toString();
        }
        return "Ne-TekstualniSadržaj";
    }

    public String promjenaMape() {
        this.preuzmiPoruke();
        return "PromjenaMape";
    }

    public String traziPoruke() {
        this.preuzmiPoruke();
        return "FiltrirajPoruke";
    }

    public String prethodnePoruke() {
        this.preuzmiPoruke();
        return "PrethodnePoruke";
    }

    public String sljedecePoruke() {
        this.preuzmiPoruke();
        return "SljedecePoruke";
    }

    public String promjenaJezika() {
        return "PromjenaJezika";
    }

    public String saljiPoruku() {
        return "SaljiPoruku";
    }

    public String getOdabranaMapa() {
        return odabranaMapa;
    }

    public void setOdabranaMapa(String odabranaMapa) {
        this.odabranaMapa = odabranaMapa;
    }

    public int getUkupnoPorukaMapa() {
        return ukupnoPorukaMapa;
    }

    public void setUkupnoPorukaMapa(int ukupnoPorukaMapa) {
        this.ukupnoPorukaMapa = ukupnoPorukaMapa;
    }

    public String getTraziPoruke() {
        return traziPoruke;
    }

    public void setTraziPoruke(String traziPoruke) {
        this.traziPoruke = traziPoruke;
    }

    public ArrayList<Izbornik> getMape() {
        return mape;
    }

    public ArrayList<Poruka> getPoruke() {
        return poruke;
    }
}
